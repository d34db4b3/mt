const M: [[u64; 4]; 4] = [
    [1989732, 1294842, 164908, 351219],
    [1586544, 650633, 1336461, 390404],
    [1645905, 1650627, 463839, 1255961],
    [1721257, 426105, 753240, 1090099],
];
const I: [[u64; 4]; 4] = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];

fn matrix_multiply_mod(a: &[[u64; 4]; 4], b: &[[u64; 4]; 4], m: u64) -> [[u64; 4]; 4] {
    let [[a00, a01, a02, a03], [a10, a11, a12, a13], [a20, a21, a22, a23], [a30, a31, a32, a33]] =
        a;
    let [[b00, b01, b02, b03], [b10, b11, b12, b13], [b20, b21, b22, b23], [b30, b31, b32, b33]] =
        b;
    return [
        [
            (a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30) % m,
            (a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31) % m,
            (a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32) % m,
            (a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33) % m,
        ],
        [
            (a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30) % m,
            (a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31) % m,
            (a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32) % m,
            (a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33) % m,
        ],
        [
            (a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30) % m,
            (a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31) % m,
            (a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32) % m,
            (a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33) % m,
        ],
        [
            (a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30) % m,
            (a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31) % m,
            (a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32) % m,
            (a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33) % m,
        ],
    ];
}
fn matrix_multiply(a: &[[u64; 4]; 4], b: &[[u64; 4]; 4]) -> [[u64; 4]; 4] {
    let [[a00, a01, a02, a03], [a10, a11, a12, a13], [a20, a21, a22, a23], [a30, a31, a32, a33]] =
        a;
    let [[b00, b01, b02, b03], [b10, b11, b12, b13], [b20, b21, b22, b23], [b30, b31, b32, b33]] =
        b;
    return [
        [
            (a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30),
            (a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31),
            (a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32),
            (a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33),
        ],
        [
            (a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30),
            (a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31),
            (a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32),
            (a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33),
        ],
        [
            (a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30),
            (a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31),
            (a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32),
            (a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33),
        ],
        [
            (a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30),
            (a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31),
            (a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32),
            (a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33),
        ],
    ];
}

fn main() {
    let mut x = M;
    let mut n = 1;
    while x != I {
        x = matrix_multiply(&x, &M);
        n += 1;
    }
    println!("{n:#x}");
    // for i in 1..64 {
    //     let mut x = M;
    //     let mut n = 1;
    //     while x != I {
    //         x = matrix_multiply_mod(&x, &M, 1 << i);
    //         n += 1;
    //     }
    //     println!("{i} {n:#x}")
    // }
}
